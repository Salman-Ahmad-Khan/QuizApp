package quiz.app;import javax.swing.*;import java.awt.*;import java.awt.event.*;public class Quiz extends JFrame implements ActionListener {     // Define arrays for questions, answers, and user answers    String questions[][] = new String[10][5];    String answers[][] = new String[10][2];    String useranswers[][] = new String[10][1];            JLabel qno, question;    JRadioButton opt1, opt2, opt3, opt4;    ButtonGroup groupoptions;    JButton next, submit, exit;         // Timer variables    public static int timer = 120;     public static int ans_given = 0;    public static int count = 0;    public static int score = 0;        String name;    Quiz(String name) {        this.name = name;        setBounds(50, 10, 1440, 800);        getContentPane().setBackground(Color.WHITE);        setUndecorated(true);        setLayout(null);                 // Create a custom JPanel with a gradient background        JPanel contentPanel = new JPanel() {            @Override            protected void paintComponent(Graphics g) {                super.paintComponent(g);                // Define your gradient colors and direction                                 // Using hexadecimal values to define colors        int blueHex = 0x0000FF; // Blue in hexadecimal (R=0, G=0, B=255)        int cyanHex = 0x00FFFF; // Cyan in hexadecimal (R=0, G=255, B=255)        // Creating Color objects using hexadecimal values        Color blueColor = new Color(blueHex);        Color cyanColor = new Color(cyanHex);        // Creating a GradientPaint using Color objects        GradientPaint gradient = new GradientPaint(0, 0, blueColor, getWidth(), getHeight(), cyanColor);       Graphics2D g2d = (Graphics2D) g;                g2d.setPaint(gradient);                g2d.fillRect(0, 0, getWidth(), getHeight());            }        };        contentPanel.setLayout(null);        setContentPane(contentPanel);        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/quiz.png"));        JLabel image = new JLabel(i1);        image.setBounds(0, 0, 1440, 392);        add(image);        // Create labels for question number and question text        qno = new JLabel();        qno.setBounds(100, 450, 50, 30);        qno.setFont(new Font("Tahoma", Font.PLAIN, 24));        add(qno);        question = new JLabel();        question.setBounds(150, 450, 900, 30);        question.setFont(new Font("Tahoma", Font.PLAIN, 24));        add(question);        // Initialize your questions and answers arrays herequestions[0][0] = "What is the correct way to declare an integer variable in Java?";        questions[0][1] = "int num";        questions[0][2] = "num int";        questions[0][3] = "integer num";        questions[0][4] = "int = num";        questions[1][0] = "What is the size of float and double in java.?";        questions[1][1] = "32 and 64";        questions[1][2] = "32 and 32";        questions[1][3] = "64 and 64";        questions[1][4] = "64 and 32";        questions[2][0] = "Automatic type conversion is possible in which of the possible cases?";        questions[2][1] = "Byte to int";        questions[2][2] = "Int to Long";        questions[2][3] = "Long to int";        questions[2][4] = "Short to int";        questions[3][0] = "Which keyword is used to define a constant in Java?";        questions[3][1] = "constant";        questions[3][2] = "final";        questions[3][3] = "static";        questions[3][4] = "const";        questions[4][0] = "Arrays in java are.?";        questions[4][1] = "Object References";        questions[4][2] = "Objects";        questions[4][3] = "Primitive data type";        questions[4][4] = "None";         questions[5][0] = "Which Java data type is used to store text?";        questions[5][1] = "char";        questions[5][2] = "int";        questions[5][3] = "boolean";        questions[5][4] = "double";        questions[6][0] = "Identify the corrected definition of a package.?";        questions[6][1] = "A package is a collection of editing tools";        questions[6][2] = "A package is a collection of Classes";        questions[6][3] = "A package is a collection of Classes and interfaces";        questions[6][4] = "A package is a collection of interfaces";        questions[7][0] = "compareTo() returns";        questions[7][1] = "True";        questions[7][2] = "False";        questions[7][3] = "An int value";        questions[7][4] = "None";        questions[8][0] = "How do you declare a method in Java that does not return any value?";        questions[8][1] = "void myMethod()";        questions[8][2] = "int myMethod()";        questions[8][3] = "String myMethod()";        questions[8][4] = "double myMethod()";        questions[9][0] = "Which Java loop is used to iterate over a collection of elements, such as an array or ArrayList?";        questions[9][1] = "for";        questions[9][2] = "if";        questions[9][3] = "while";        questions[9][4] = "switch";        answers[0][1] = "int num";        answers[1][1] = "32 and 64";        answers[2][1] = "Int to Long";        answers[3][1] = "final";        answers[4][1] = "Objects";        answers[5][1] = "char";        answers[6][1] = "A package is a collection of Classes and interfaces";        answers[7][1] = "An int value";        answers[8][1] = "void myMethod()";        answers[9][1] = "for";        // Create radio buttons and a button group for options        opt1 = new JRadioButton();        opt1.setBounds(170, 520, 700, 30);        opt1.setBackground(Color.WHITE);        opt1.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt1);        opt2 = new JRadioButton();        opt2.setBounds(170, 560, 700, 30);        opt2.setBackground(Color.WHITE);        opt2.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt2);        opt3 = new JRadioButton();        opt3.setBounds(170, 600, 700, 30);        opt3.setBackground(Color.WHITE);        opt3.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt3);        opt4 = new JRadioButton();        opt4.setBounds(170, 640, 700, 30);        opt4.setBackground(Color.WHITE);        opt4.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt4);        groupoptions = new ButtonGroup();        groupoptions.add(opt1);        groupoptions.add(opt2);        groupoptions.add(opt3);        groupoptions.add(opt4);            // Create buttons for exit, next, and submit        exit = new JButton("Exit");        exit.setBounds(700, 750, 200, 30);        exit.setFont(new Font("Tahoma", Font.PLAIN, 18));        exit.setBackground( Color.BLUE);        exit.setForeground(Color.WHITE);        exit.addActionListener(this);        add(exit);        next = new JButton("Next");        next.setBounds(930, 750, 200, 30);        next.setFont(new Font("Tahoma", Font.PLAIN, 18));        next.setBackground( Color.BLUE);        next.setForeground(Color.WHITE);        next.setFocusPainted(false);        next.addActionListener(this);        add(next);        submit = new JButton("Submit");        submit.setBounds(1150, 750, 200, 30);        submit.setForeground(Color.WHITE);        submit.setFont(new Font("Tahoma", Font.PLAIN, 18));        submit.setBackground( Color.GRAY);        submit.addActionListener(this);        submit.setEnabled(false);        add(submit);        start(count);//        setSize(1000,500);//        setLocation(200,150);        setVisible(true);        startTimer(); // Start the timer when the quiz starts    }    // Add a boolean flag to track if the quiz has been submittedprivate boolean quizSubmitted = false;// Method to start the timerpublic void startTimer() {    Thread timerThread = new Thread(new Runnable() {        @Override        public void run() {            while (timer > 0 && !quizSubmitted) { // Check if quiz is not submitted                try {                    Thread.sleep(1000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                timer--;                updateTimerDisplay();                if (timer == 0 && !quizSubmitted) { // Check if timer is not already expired and quiz is not submitted                    // Time is up, show a message and enable the submit button                    JOptionPane.showMessageDialog(null, "Time is up! Submit the quiz.");                    enableSubmitButton();                    break;                }            }        }    });    timerThread.start();}// Method to handle quiz submissionpublic void submitQuiz() {    // Set the quizSubmitted flag to true when the quiz is submitted    quizSubmitted = true;    }    // Method to enable the submit button    public void enableSubmitButton() {        submit.setEnabled(true);        opt1.setEnabled(false);        opt2.setEnabled(false);        opt3.setEnabled(false);        opt4.setEnabled(false);    }    // Method to update the timer display    public void updateTimerDisplay() {        SwingUtilities.invokeLater(new Runnable() {            public void run() {                repaint();            }        });    }        // ActionListener implementation for handling button clicks   public void actionPerformed(ActionEvent ae) {    if (ae.getSource() == next) {        repaint();        opt1.setEnabled(true);        opt2.setEnabled(true);        opt3.setEnabled(true);        opt4.setEnabled(true);        ans_given = 1;        if (groupoptions.getSelection() == null) {            useranswers[count][0] = "";        } else {            useranswers[count][0] = groupoptions.getSelection().getActionCommand();        }        if (count == 8) {            next.setEnabled(false);            submit.setEnabled(true);        }        count++;        start(count);    } else if (ae.getSource() == exit) {        System.exit(0);    } else if (ae.getSource() == submit) {        ans_given = 1;        if (groupoptions.getSelection() == null) {            useranswers[count][0] = "";        } else {            useranswers[count][0] = groupoptions.getSelection().getActionCommand();        }        // Calculate the score with a null check        for (int i = 0; i < useranswers.length; i++) {            if (useranswers[i][0] != null && useranswers[i][0].equals(answers[i][1])) {                score += 10;            } else {                score += 0;            }        }        setVisible(false);        new Score(name, score);    }}      // Paint method for displaying the timer    public void paint(Graphics g) {        super.paint(g);        String time = "Time left - " + (timer / 60) + " min " + (timer % 60) + " sec"; // Display time in minutes and seconds        g.setColor(Color.RED);        g.setFont(new Font("Tahoma", Font.BOLD, 25));        g.drawString(time, 1100, 500);        if (ans_given == 1) {            ans_given = 0;        }    }           // Method to load and display a new question    public void start(int count) {        qno.setText("" + (count + 1) + ". ");        question.setText(questions[count][0]);        opt1.setText(questions[count][1]);        opt1.setActionCommand(questions[count][1]);        opt2.setText(questions[count][2]);        opt2.setActionCommand(questions[count][2]);        opt3.setText(questions[count][3]);        opt3.setActionCommand(questions[count][3]);        opt4.setText(questions[count][4]);        opt4.setActionCommand(questions[count][4]);        groupoptions.clearSelection();    }    public static void main(String[] args) {        new Quiz("name");    }}